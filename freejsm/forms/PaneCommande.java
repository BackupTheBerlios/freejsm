/*
 * PaneEntree.java
 *
 * Created on 17 décembre 2004, 17:46
 */

package forms;


import com.develog.utils.SmartConnector;
import com.develog.utils.SmartCube;
import com.develog.swing.SmartJTable;

import classes.Utilisateur;
import dialogs.ChoixCategorie;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

import javax.swing.JTable;
import javax.swing.tree.*;
import java.awt.event.*;

import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author  nahuel
 */
public class PaneCommande extends javax.swing.JPanel {
    
        
    private String tableColumns[] = {"Code", "Libellé", "Quantité", "Unité", "TVA", "Prix HT"};
    
    private Integer selectedCAID = new Integer(0);
    
    private Utilisateur util;
    
    public  SmartJTable productintSJT = null;
    private SmartCube productintsc;
    
    private SmartCube commandeintsc;
    
    private Connection intConnection;
    private SmartCube categorieSC;
    private SmartConnector produitconnector;
    private SmartConnector productintsconnector;
    
    private Vector productGUI = new Vector();
    private String section;
    private DefaultTreeModel treeModel;
    private Hashtable liste = new Hashtable();
    private Hashtable inverse = new Hashtable();
    
    private int qtEnModif;
    private int selected_ID;
    private int st_id;
    private boolean enModification = false;
    
    private PrincipaleGUI papa;
    
    /** Creates new form PaneEntree */
    public PaneCommande(Connection extConnection, int st_id, Utilisateur util, PrincipaleGUI papa) {
        this.st_id = st_id;
        this.papa = papa;
        this.util = util;
        this.intConnection = extConnection;
        initComponents();
        
            commandeTable.getColumnModel().getColumn(0).setMaxWidth(0);
            commandeTable.getColumnModel().getColumn(0).setMinWidth(0);
            commandeTable.getColumnModel().getColumn(0).setPreferredWidth(0);
            
        // On initialise le JTree de catégorie
        initCubeCategorie();
        RafraichirArbre();
        
        // On initialise la JTable des produits
        initProduitCube();
        initProduitTable();
        initProduitDoubleClick();
        
        initCommandeClick();
        codeCommandeField.setEditable(false);
        designCommandeField.setEditable(false);
        
        initSeuilList(st_id);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        popUPTree = new javax.swing.JPopupMenu();
        pCNouveau = new javax.swing.JMenuItem();
        pCModifier = new javax.swing.JMenuItem();
        pCSupprimer = new javax.swing.JMenuItem();
        pCAddArticle = new javax.swing.JMenuItem();
        searchPane = new javax.swing.JPanel();
        catListPane = new javax.swing.JScrollPane();
        categoryTree = new javax.swing.JTree();
        rafinePane = new javax.swing.JPanel();
        fieldsPane = new javax.swing.JPanel();
        codeLabel = new javax.swing.JLabel();
        codeField = new javax.swing.JTextField();
        designLabel = new javax.swing.JLabel();
        designField = new javax.swing.JTextField();
        majButton = new javax.swing.JButton();
        supprArticle = new javax.swing.JButton();
        productTab = new javax.swing.JScrollPane();
        commandPane = new javax.swing.JPanel();
        selectPane = new javax.swing.JPanel();
        codeCommandeLabel = new javax.swing.JLabel();
        codeCommandeField = new javax.swing.JTextField();
        designCommandeLabel = new javax.swing.JLabel();
        designCommandeField = new javax.swing.JTextField();
        qtCommandeLabel = new javax.swing.JLabel();
        qtCommandeField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        delButton = new javax.swing.JButton();
        selectedPane = new javax.swing.JPanel();
        tabScrollPane1 = new javax.swing.JScrollPane();
        commandeTable = new javax.swing.JTable();
        actionsPane = new javax.swing.JPanel();
        validButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        pCNouveau.setText("Nouveau");
        pCNouveau.setToolTipText("Permet de cr\u00e9er un nouveau client");
        pCNouveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pCNouveauActionPerformed(evt);
            }
        });

        popUPTree.add(pCNouveau);

        pCModifier.setText("Renommer");
        pCModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pCModifierActionPerformed(evt);
            }
        });

        popUPTree.add(pCModifier);

        pCSupprimer.setText("Supprimer");
        pCSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pCSupprimerActionPerformed(evt);
            }
        });

        popUPTree.add(pCSupprimer);

        pCAddArticle.setText("Ajouter un article");
        pCAddArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pCAddArticleActionPerformed(evt);
            }
        });

        popUPTree.add(pCAddArticle);

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        searchPane.setLayout(new java.awt.BorderLayout());

        searchPane.setBorder(new javax.swing.border.EtchedBorder());
        catListPane.setAutoscrolls(true);
        categoryTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                categoryTreeMouseClicked(evt);
            }
        });

        catListPane.setViewportView(categoryTree);

        searchPane.add(catListPane, java.awt.BorderLayout.WEST);

        rafinePane.setLayout(new java.awt.BorderLayout());

        codeLabel.setText("Code : ");
        fieldsPane.add(codeLabel);

        codeField.setColumns(10);
        codeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codeFieldKeyReleased(evt);
            }
        });

        fieldsPane.add(codeField);

        designLabel.setText("D\u00e9signation : ");
        fieldsPane.add(designLabel);

        designField.setColumns(15);
        designField.setMinimumSize(new java.awt.Dimension(50, 19));
        designField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                designFieldKeyReleased(evt);
            }
        });

        fieldsPane.add(designField);

        majButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develog/icones/stock_refresh_24.png")));
        majButton.setMaximumSize(new java.awt.Dimension(48, 26));
        majButton.setMinimumSize(new java.awt.Dimension(48, 26));
        majButton.setPreferredSize(new java.awt.Dimension(48, 26));
        majButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                majButtonActionPerformed(evt);
            }
        });

        fieldsPane.add(majButton);

        supprArticle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develog/icones/stock_stop_24.png")));
        supprArticle.setToolTipText("Supprimer l'article");
        supprArticle.setMaximumSize(new java.awt.Dimension(48, 26));
        supprArticle.setMinimumSize(new java.awt.Dimension(48, 26));
        supprArticle.setPreferredSize(new java.awt.Dimension(48, 26));
        supprArticle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprArticleActionPerformed(evt);
            }
        });

        fieldsPane.add(supprArticle);

        rafinePane.add(fieldsPane, java.awt.BorderLayout.NORTH);

        rafinePane.add(productTab, java.awt.BorderLayout.CENTER);

        searchPane.add(rafinePane, java.awt.BorderLayout.CENTER);

        add(searchPane);

        commandPane.setLayout(new java.awt.BorderLayout());

        commandPane.setBorder(new javax.swing.border.TitledBorder("Commande"));
        codeCommandeLabel.setText("Code :");
        selectPane.add(codeCommandeLabel);

        codeCommandeField.setColumns(7);
        codeCommandeField.setName("AR_CODE");
        selectPane.add(codeCommandeField);

        designCommandeLabel.setText("D\u00e9signation :");
        selectPane.add(designCommandeLabel);

        designCommandeField.setColumns(12);
        designCommandeField.setName("AR_DESIGN");
        designCommandeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                designCommandeFieldActionPerformed(evt);
            }
        });

        selectPane.add(designCommandeField);

        qtCommandeLabel.setText("Quantit\u00e9 :");
        selectPane.add(qtCommandeLabel);

        qtCommandeField.setColumns(3);
        selectPane.add(qtCommandeField);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develog/icones/stock_add_24.png")));
        addButton.setMaximumSize(new java.awt.Dimension(48, 26));
        addButton.setMinimumSize(new java.awt.Dimension(48, 26));
        addButton.setPreferredSize(new java.awt.Dimension(48, 26));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        selectPane.add(addButton);

        delButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develog/icones/stock_cancel-16.png")));
        delButton.setPreferredSize(new java.awt.Dimension(48, 26));
        delButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delButtonActionPerformed(evt);
            }
        });

        selectPane.add(delButton);

        commandPane.add(selectPane, java.awt.BorderLayout.NORTH);

        selectedPane.setLayout(new java.awt.BorderLayout());

        commandeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Code", "Désignation", "Quantité", "Conditionnement", "Unité de mesure", "TVA", "Prix HT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabScrollPane1.setViewportView(commandeTable);

        selectedPane.add(tabScrollPane1, java.awt.BorderLayout.CENTER);

        commandPane.add(selectedPane, java.awt.BorderLayout.CENTER);

        add(commandPane);

        validButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develog/icones/stock_apply_20.png")));
        validButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validButtonActionPerformed(evt);
            }
        });

        actionsPane.add(validButton);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/develog/icones/stock_cancel_20.png")));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        actionsPane.add(cancelButton);

        add(actionsPane);

    }//GEN-END:initComponents

    private void designFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_designFieldKeyReleased
        refresh();
    }//GEN-LAST:event_designFieldKeyReleased

    private void codeFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeFieldKeyReleased
        refresh();
    }//GEN-LAST:event_codeFieldKeyReleased

    private void majButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_majButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_majButtonActionPerformed

    private void supprArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprArticleActionPerformed
        if(JOptionPane.showConfirmDialog(this,"Voulez vous réellement supprimer cet article ?","Suppression d'article",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            try{
                Integer ar_id = productintsc.getCubeInt("AR_ID");
                ResultSet rset = intConnection.prepareStatement("SELECT * FROM ARTICLE WHERE AR_ID = "+ar_id).executeQuery();
                rset.next();
                String anc_valeurs = "###AR_ID=>"+ar_id+"###FO_ID=>"+rset.getInt("FO_ID")+"###CA_ID=>"+rset.getInt("CA_ID")+"###TVA_ID=>"+rset.getInt("TVA_ID")+"###AR_CODE=>"+rset.getString("AR_CODE")+"###AR_DESIGN=>"+rset.getString("AR_DESIGN")+"###AR_UNIT=>"+rset.getString("AR_UNIT")+"###AR_COND=>"+rset.getString("AR_COND")+"###AR_ACTIV=>";
                intConnection.prepareStatement("UPDATE ARTICLE SET AR_ACTIV=0 WHERE AR_ID=" + ar_id).executeUpdate();
                
                PreparedStatement pstatement = intConnection.prepareStatement("INSERT INTO JOURNAL (UTIL_ID,JO_TABNOM,JO_PRECVAl,JO_NOUVAL,JO_OPERATION) VALUES ("+util.getID()+",'ARTICLE',?,?,'U')");
                pstatement.setString(1, anc_valeurs+"1");
                pstatement.setString(2, anc_valeurs+"1");
                pstatement.executeUpdate();
                
                
                initProduitCube();
                initProduitTable();
                initProduitDoubleClick();
                JOptionPane.showMessageDialog(this,"L'article a bien été supprimé", "Information",JOptionPane.INFORMATION_MESSAGE);
            }catch(Exception e){
                System.out.println("[PaneCommande][supprArticleActionPerformed] Exception : " + e);
                e.printStackTrace();
                JOptionPane.showMessageDialog(this,"Erreur durant la suppression !", "Erreur",JOptionPane.ERROR_MESSAGE);
            }
        
        }
    }//GEN-LAST:event_supprArticleActionPerformed

    private void pCAddArticleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pCAddArticleActionPerformed
        (new dialogs.AddArticle(papa ,true, intConnection, ((Integer)inverse.get(categoryTree.getLastSelectedPathComponent())).intValue(), st_id, util.getID().intValue())).show();
    }//GEN-LAST:event_pCAddArticleActionPerformed

    private void pCSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pCSupprimerActionPerformed
        //Ajoute une ligne
        Hashtable Info = new Hashtable();
        Info.put("CA_VISIBLE",new Boolean(false));

        try{
            int CA_PID = ((Integer)inverse.get(categoryTree.getLastSelectedPathComponent())).intValue();  
            categorieSC.setQuery("select * from CATEGORIE where CA_ID = " + CA_PID);
            categorieSC.loadCube();

            categorieSC.setCubeData(Info);
            categorieSC.commitCubeTransaction();
            categorieSC.commitDBTransaction();

            TreeNode papa = ((DefaultMutableTreeNode)categoryTree.getLastSelectedPathComponent()).getParent();

            if (!((DefaultMutableTreeNode)categoryTree.getLastSelectedPathComponent()).isLeaf()) {
                ((DefaultMutableTreeNode)categoryTree.getLastSelectedPathComponent()).removeAllChildren();
                ((DefaultMutableTreeNode)categoryTree.getLastSelectedPathComponent()).removeFromParent();
            }

            ((DefaultMutableTreeNode)categoryTree.getLastSelectedPathComponent()).removeFromParent(); 
            ((DefaultTreeModel)(categoryTree.getModel())).reload(papa);

        }catch(Exception e){
            System.out.println(e);
        }
        ((DefaultTreeModel)(categoryTree.getModel())).reload(((DefaultMutableTreeNode)categoryTree.getLastSelectedPathComponent()));
    }//GEN-LAST:event_pCSupprimerActionPerformed

    private void pCModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pCModifierActionPerformed
        try{
            int CA_PID = ((Integer)inverse.get(categoryTree.getLastSelectedPathComponent())).intValue();  
            categorieSC.setQuery("select * from CATEGORIE where CA_ID = " + CA_PID);
            categorieSC.loadCube();

            new ChoixCategorie(papa,true,categorieSC,CA_PID,section,false).show();
            ((DefaultMutableTreeNode)categoryTree.getLastSelectedPathComponent()).setUserObject(categorieSC.getCubeString("CA_NOM"));   
        }catch(Exception e){
            System.out.println("[PaneProduits][PCModifierActionPerformed] Exception: "+e);
            e.printStackTrace();
        }
        ((DefaultTreeModel)(categoryTree.getModel())).reload(((DefaultMutableTreeNode)categoryTree.getLastSelectedPathComponent()));
    }//GEN-LAST:event_pCModifierActionPerformed

    private void pCNouveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pCNouveauActionPerformed
        int CA_PID = ((Integer)inverse.get(categoryTree.getLastSelectedPathComponent())).intValue(); 
        new ChoixCategorie( papa,true,categorieSC,CA_PID,section,true).show();
        // Le smartCube étant déja positionné au retour de la fenetre on affiche juste la liste // 
        try{
             DefaultMutableTreeNode tempo = new DefaultMutableTreeNode(categorieSC.getCubeString("CA_NOM"));      
             ((DefaultMutableTreeNode)categoryTree.getLastSelectedPathComponent()).add(tempo);
             liste.put(categorieSC.getCubeInt("CA_ID"),tempo);      
             inverse.put(tempo,categorieSC.getCubeInt("CA_ID"));
        }catch(Exception e){
            System.out.println("[PaneProduits][PCNouveauActionPerformed] Exception: "+e);
            e.printStackTrace();
        }
        ((DefaultTreeModel)(categoryTree.getModel())).reload(((DefaultMutableTreeNode)categoryTree.getLastSelectedPathComponent()));
    }//GEN-LAST:event_pCNouveauActionPerformed

    private void delButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)commandeTable.getModel();
        model.removeRow(commandeTable.getSelectedRow());
    }//GEN-LAST:event_delButtonActionPerformed

    private void validButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validButtonActionPerformed
        try{
            
            if(commandeTable.getRowCount() > 0){
                java.util.Locale locale = java.util.Locale.getDefault();
                java.text.DateFormat dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");               

                intConnection.prepareStatement("INSERT INTO COMMANDE (UTIL_ID,ST_ID,CO_DATE) VALUES(" + util.getID() + "," + st_id + ",'" + dateFormat.format(new java.util.Date()) + "')").executeUpdate();

                ResultSet rset = intConnection.prepareStatement("select @@IDENTITY as 'ident'").executeQuery();
                rset.next();

                intConnection.prepareStatement("INSERT INTO JOURNAL (UTIL_ID,JO_TABNOM,JO_PRECVAL,JO_NOUVAL,JO_OPERATION) VALUES(" + util.getID() + ",'COMMANDE','','###CO_ID=>" + rset.getInt(1) + "###UTIL_ID=>" + util.getID() + "###ST_ID=>" + st_id + "###CO_DATE=>"+ dateFormat.format(new java.util.Date()) + "','I')").executeUpdate();

                for(int i = 0 ; i < commandeTable.getRowCount() ; i++){    
                    intConnection.prepareStatement("INSERT INTO CONTENU_COMMANDE (CO_ID, AR_ID, CC_QT, AR_PRIX) VALUES(" + rset.getInt(1) + "," + commandeTable.getModel().getValueAt(i,0) + "," + commandeTable.getModel().getValueAt(i,3) + ",'" + commandeTable.getModel().getValueAt(i,7) + "')").executeUpdate();
                    ResultSet rset2 = intConnection.prepareStatement("select @@IDENTITY as 'ident'").executeQuery();
                    rset2.next();
                    intConnection.prepareStatement("INSERT INTO JOURNAL (UTIL_ID,JO_TABNOM,JO_PRECVAL,JO_NOUVAL,JO_OPERATION) VALUES(" + util.getID() + ",'CONTENU_COMMANDE','','###CC_ID=>" + rset2.getInt(1) + "###CO_ID=>" + rset.getInt(1) + "###AR_ID=>" + commandeTable.getModel().getValueAt(i,0) + "###CC_QT=>" + commandeTable.getModel().getValueAt(i,3) +"###AR_PRIX=>" + commandeTable.getModel().getValueAt(i,7) +"','I')" ).executeUpdate();
                     papa.principalTab.remove(this);
                }


                JOptionPane.showMessageDialog(this,"La commande a bien été ajouté","Ajout effectué",JOptionPane.INFORMATION_MESSAGE,null);
                papa.principalTab.remove(this);
                papa.newCommandeRapport(st_id, rset.getInt(1));
            }else
                JOptionPane.showMessageDialog(this,"Il n'y a aucun article selectioné","Erreur",JOptionPane.ERROR_MESSAGE,null);
            
        }catch(Exception e){
            System.out.println("[PaneCommande][validButtonActionPerformed] Exception : " +e );
            e.printStackTrace();
        }
    }//GEN-LAST:event_validButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
                 papa.principalTab.remove(this);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        
            try{
                if(!enModification){
                    Vector arData = new Vector();
                    DefaultTableModel model = (DefaultTableModel)commandeTable.getModel();

                    ResultSet rset = intConnection.prepareStatement("SELECT AR_CODE, AR_DESIGN, AR_COND, AR_UNIT, TVA_TX, CS_PRIXUNITAIRE FROM TVA, ARTICLE, CONTENU_STOCK WHERE ARTICLE.TVA_ID = TVA.TVA_ID AND CONTENU_STOCK.AR_ID = ARTICLE.AR_ID AND ARTICLE.AR_ID = " + productintsc.getCubeInt("AR_ID") ).executeQuery();
                    rset.next();

                    arData.add(productintsc.getCubeInt("AR_ID"));
                    arData.add(rset.getString("AR_CODE"));
                    arData.add(rset.getString("AR_DESIGN"));
                    arData.add(qtCommandeField.getText());
                    arData.add(new Float(rset.getFloat("AR_COND")));
                    arData.add(rset.getString("AR_UNIT"));
                    arData.add(rset.getString("TVA_TX"));
                    arData.add((new Float(rset.getFloat("CS_PRIXUNITAIRE") * (new Float(qtCommandeField.getText())).floatValue())).toString());

                    model.addRow(arData);

                    commandeTable.setModel(model);
                }else{
                    ResultSet rset = intConnection.prepareStatement("SELECT CS_PRIXUNITAIRE FROM CONTENU_STOCK WHERE AR_ID = " + commandeTable.getModel().getValueAt(commandeTable.getSelectedRow(), 0)).executeQuery();
                    rset.next();
                    commandeTable.setValueAt(qtCommandeField.getText(), commandeTable.getSelectedRow(), 3);
                    commandeTable.setValueAt(new Integer(new Integer(qtCommandeField.getText()).intValue() * rset.getInt("CS_PRIXUNITAIRE")), commandeTable.getSelectedRow(), 6);
                    etatDeBase();
                    enModification = false;
                }


                etatDeBase();

            }catch(Exception e){
                System.out.println("[PaneCommande][addButtonActionPerformed] Exception : " +e);
                e.printStackTrace();
            }
    }//GEN-LAST:event_addButtonActionPerformed

    private void categoryTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoryTreeMouseClicked
        // Permet de selectionner un item dans l'arbre
        if(evt.getModifiers() == MouseEvent.BUTTON3_MASK)
            popUPTree.show(evt.getComponent(),evt.getX(),evt.getY());
        if(evt.getModifiers() == MouseEvent.BUTTON1_MASK){
            if(checkAnnulation()){
                etatDeBase();
                selectedCAID = (Integer)inverse.get(categoryTree.getLastSelectedPathComponent());
                if(selectedCAID == null)
                    selectedCAID = new Integer(0);
                
                refresh();
            }
        }
    }//GEN-LAST:event_categoryTreeMouseClicked

    private void designCommandeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_designCommandeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_designCommandeFieldActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionsPane;
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane catListPane;
    private javax.swing.JTree categoryTree;
    private javax.swing.JTextField codeCommandeField;
    private javax.swing.JLabel codeCommandeLabel;
    private javax.swing.JTextField codeField;
    private javax.swing.JLabel codeLabel;
    private javax.swing.JPanel commandPane;
    private javax.swing.JTable commandeTable;
    private javax.swing.JButton delButton;
    private javax.swing.JTextField designCommandeField;
    private javax.swing.JLabel designCommandeLabel;
    private javax.swing.JTextField designField;
    private javax.swing.JLabel designLabel;
    private javax.swing.JPanel fieldsPane;
    private javax.swing.JButton majButton;
    private javax.swing.JMenuItem pCAddArticle;
    private javax.swing.JMenuItem pCModifier;
    private javax.swing.JMenuItem pCNouveau;
    private javax.swing.JMenuItem pCSupprimer;
    private javax.swing.JPopupMenu popUPTree;
    private javax.swing.JScrollPane productTab;
    private javax.swing.JTextField qtCommandeField;
    private javax.swing.JLabel qtCommandeLabel;
    private javax.swing.JPanel rafinePane;
    private javax.swing.JPanel searchPane;
    private javax.swing.JPanel selectPane;
    private javax.swing.JPanel selectedPane;
    private javax.swing.JButton supprArticle;
    private javax.swing.JScrollPane tabScrollPane1;
    private javax.swing.JButton validButton;
    // End of variables declaration//GEN-END:variables
    
     
    private void initCubeCategorie(){
        try{
            categorieSC = new SmartCube(intConnection);
            categorieSC.setQuery("select * from CATEGORIE where CA_VISIBLE = '1' ");
            categorieSC.loadCube();
        }catch(Exception e){ 
            System.out.println(e);
        }
    }
    
     
    /* Permet de recharger l'arbre des clients */
    public void RafraichirArbre(){
        
        DefaultMutableTreeNode activite     = new DefaultMutableTreeNode("Catégories");
        
        try{
            categorieSC.getBeforeFirst();
            // On compose la liste de tous les nodes */
            while(categorieSC.getNext()) 
            {
                DefaultMutableTreeNode tempo = new DefaultMutableTreeNode(categorieSC.getCubeString("CA_NOM"));      
                liste.put(categorieSC.getCubeInt("CA_ID"),tempo);      
                inverse.put(tempo,categorieSC.getCubeInt("CA_ID"));
            }
            categorieSC.getBeforeFirst();
            while(categorieSC.getNext()){
                if ( !liste.containsKey(categorieSC.getCubeInt("CA_PARENT"))) activite.add((DefaultMutableTreeNode)liste.get(categorieSC.getCubeInt("CA_ID")));                
                else ((DefaultMutableTreeNode)liste.get(categorieSC.getCubeInt("CA_PARENT"))).add((DefaultMutableTreeNode)liste.get(categorieSC.getCubeInt("CA_ID"))); 
            }
        }catch(Exception e){ System.out.println(e);};
        
        treeModel =  new DefaultTreeModel(activite);
        categoryTree.setModel(treeModel);
        
    }
   
     
    private void initProduitTable(){ 
        try{
              Hashtable mappingColName = new Hashtable();
              HashMap invisibleColName  = new HashMap();

              /** On renomme les colonnes qui vont servir */

              mappingColName.put("AR_CODE","Code");
              mappingColName.put("AR_DESIGN","Désignation");
              mappingColName.put("AR_UNIT","Unité de mesure");
              mappingColName.put("AR_COND","Conditionnement");
              mappingColName.put("CS_QT","Quantité");
              mappingColName.put("CS_SEUIL","Seuil");
              mappingColName.put("CS_PRIXUNITAIRE","Prix Unitaire");


              /** On masque celle qui servent à rien */
              invisibleColName.put("CA_ID", "AR_CA_ID");
              invisibleColName.put("AR_ID"  , "AR_ID");
              invisibleColName.put("ST_ID"  , "ST_ID");

              productintSJT = new SmartJTable(productintsc, mappingColName, invisibleColName);
              productTab.setViewportView(productintSJT);
        }catch(Exception e){
            System.out.println(e);};  
    }
    
     
    private boolean checkAnnulation() {
        return (!enModification || ( JOptionPane.showConfirmDialog(this,"Annuler la saisie en cours ?","Annulation",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null) == 0));
    }
    
    private void initProduitDoubleClick() {
       productintSJT.addMouseListener(new MouseAdapter(){
          public void mouseClicked(MouseEvent e){
            if ((e.getClickCount() == 1) && ( checkAnnulation())){
              try{
                    enModification = false;
                    etatDeBase();
                    System.out.print("-*-");
                    productintsc.getSpecific(productintSJT.getSelectedRow()+1);
                    productintsconnector.setValuesFromCube();
                    selected_ID = productintsc.getCubeInt("AR_ID").intValue();
              }catch(Exception e2){
                  etatDeBase();
                  System.out.println("[initEditDoubleClick][UnClic] Exception : " + e2);e2.printStackTrace();
              }
            }
         }
       });
    }

    private void initCommandeClick() {
       commandeTable.addMouseListener(new MouseAdapter(){
          public void mouseClicked(MouseEvent e){
            if ((e.getClickCount() == 2) && ( checkAnnulation())){
              try{
                    enModification = true;
                    System.out.print("-**-");
                    
                    qtEnModif = ((Integer)commandeTable.getModel().getValueAt(commandeTable.getSelectedRow(), 0)).intValue();
                    qtCommandeField.setText((String)commandeTable.getModel().getValueAt(commandeTable.getSelectedRow(), 3));
                    codeCommandeField.setText((String)commandeTable.getModel().getValueAt(commandeTable.getSelectedRow(), 1));
                    designCommandeField.setText((String)commandeTable.getModel().getValueAt(commandeTable.getSelectedRow(), 2));
                    
              }catch(Exception e2){
                  etatDeBase();
                  System.out.println("[initEditDoubleClick][UnClic] Exception : " + e2);e2.printStackTrace();
              }
            }
         }
       });
    }    
     
    public void refresh(){
     try{
        if(selectedCAID.intValue() != 0){
            productintSJT.setQuery("SELECT STOCK.ST_ID, ARTICLE.AR_ID, CA_ID, AR_CODE, AR_DESIGN, AR_UNIT, AR_COND, CS_QT, CS_SEUIL, CS_PRIXUNITAIRE from ARTICLE, CONTENU_STOCK, STOCK WHERE STOCK.ST_ID = CONTENU_STOCK.ST_ID AND ARTICLE.AR_ID = CONTENU_STOCK.AR_ID AND ST_ACTIV = 1 AND AR_CODE like '" + codeField.getText() + "%' AND AR_DESIGN like '" + designField.getText() + "%' AND STOCK.ST_ID = " + st_id + " AND AR_ACTIV = 1 AND CA_ID IN (" + getCAT(selectedCAID) + ") order by AR_ID desc");
            // producteditintSJT.setQuery("SELECT AR_ID, CA_ID, AR_CODE, AR_DESIGN, AR_UNIT, AR_COND from ARTICLE WHERE AR_CODE like '" + codeField.getText() + "%' AND AR_DESIGN like '" + designField.getText() + "%' order by AR_ID desc");
            productintSJT.loadData();
            productintSJT.change();
        }else{
            productintSJT.setQuery("SELECT STOCK.ST_ID, ARTICLE.AR_ID, CA_ID, AR_CODE, AR_DESIGN, AR_UNIT, AR_COND, CS_QT, CS_SEUIL, CS_PRIXUNITAIRE from ARTICLE, CONTENU_STOCK, STOCK WHERE STOCK.ST_ID = CONTENU_STOCK.ST_ID AND ARTICLE.AR_ID = CONTENU_STOCK.AR_ID AND ST_ACTIV = 1 AND AR_CODE like '" + codeField.getText() + "%' AND AR_DESIGN like '" + designField.getText() + "%' AND STOCK.ST_ID = " + st_id + " AND AR_ACTIV = 1 order by AR_ID desc");
            productintSJT.loadData();
            productintSJT.change();
        }
     }catch(Exception e){
         System.out.println("[PaneCommande][refresh] Exception : " + e);
         e.printStackTrace();
     }
    }
   
    private String getCAT(Integer parent){
        String retour = new String(parent.toString());
            try{
                ResultSet rset = intConnection.prepareStatement("SELECT * FROM CATEGORIE WHERE CA_PARENT = " + parent + " AND CA_ID NOT IN (" + parent + ")").executeQuery();
                while(rset.next()){
                    //retour = retour + "," + rset.getInt("CA_ID");
                    retour = retour + "," + getCAT(new Integer(rset.getInt("CA_ID")));
                }
            }catch(Exception e){
                System.out.println("[PaneCommande][getCAT] Exception : " + e );
                e.printStackTrace();
            }
        return retour;
    }    
    
     
    private void initProduitCube(){
        try{

            productintsc = new SmartCube(intConnection);
            productintsc.setQuery("SELECT STOCK.ST_ID, ARTICLE.AR_ID, CA_ID, AR_CODE, AR_DESIGN, AR_UNIT, AR_COND, CS_QT, CS_SEUIL, CS_PRIXUNITAIRE from ARTICLE, CONTENU_STOCK, STOCK WHERE STOCK.ST_ID = CONTENU_STOCK.ST_ID AND ARTICLE.AR_ID = CONTENU_STOCK.AR_ID AND ST_ACTIV = 1 AND STOCK.ST_ID = " + st_id + " AND AR_ACTIV = 1 order by AR_ID desc");
            productintsc.loadCube();
            productGUI.add(selectPane);
            productintsconnector = new SmartConnector(productintsc,productGUI);
            productintsconnector.setEditable(false);
            }catch(Exception e){ 
                System.out.println(e);
            }
    }
    
    
    private void etatDeBase(){
        qtCommandeField.setText("");
        codeCommandeField.setText("");
        designCommandeField.setText("");
    }   
    
    private void etatDeModification(){
        
    }

    private void initSeuilList(int st_id){
        try{
            int i = 0;
            ResultSet seuilRset = intConnection.prepareStatement("SELECT ARTICLE.AR_ID, AR_CODE, AR_DESIGN, AR_UNIT, AR_COND, TVA_TX, CS_QT, CS_SEUIL, CS_PRIXUNITAIRE FROM TVA, ARTICLE, CONTENU_STOCK WHERE ST_ID = " + st_id + " AND ARTICLE.AR_ID = CONTENU_STOCK.AR_ID AND ARTICLE.TVA_ID = TVA.TVA_ID").executeQuery();
            while(seuilRset.next()){
                if(seuilRset.getFloat("CS_QT") < seuilRset.getFloat("CS_SEUIL")){
                    i++;
                    Vector arData = new Vector();
                    DefaultTableModel model = (DefaultTableModel)commandeTable.getModel();

                    arData.add(new Integer(seuilRset.getInt("AR_ID")));
                    arData.add(seuilRset.getString("AR_CODE"));
                    arData.add(seuilRset.getString("AR_DESIGN"));
                    arData.add(new java.math.BigDecimal((seuilRset.getFloat("CS_SEUIL") - seuilRset.getFloat("CS_QT"))/seuilRset.getFloat("AR_COND")).divide(new java.math.BigDecimal(1),0,java.math.BigDecimal.ROUND_UP));
                    arData.add(new Float(seuilRset.getFloat("AR_COND")));
                    arData.add(seuilRset.getString("AR_UNIT"));
                    arData.add(seuilRset.getString("TVA_TX"));
                    arData.add(new Float(seuilRset.getFloat("CS_PRIXUNITAIRE") * (seuilRset.getFloat("CS_SEUIL") - seuilRset.getFloat("CS_QT"))));

                    model.addRow(arData);

                    commandeTable.setModel(model);
                }
            }
            if(i==1)
                JOptionPane.showMessageDialog(this,i + " produit a été rajouté car la quantité en stock est inférieure au seuil de réapprovisionnement","Seuils dépassés",JOptionPane.INFORMATION_MESSAGE,null);
            else if(i > 1)
                JOptionPane.showMessageDialog(this,i + " produits ont été rajoutés car la quantité en stock est inférieure au seuil de réapprovisionnement","Seuils dépassés",JOptionPane.INFORMATION_MESSAGE,null);
        }catch(Exception e){
            System.out.println("[PaneCommande][initSeuilList] Exception : " +e );
            e.printStackTrace();
        }
    }
}
