/*
 * OpenCommande.java
 *
 * Created on 26 mai 2005, 14:53
 */

package dialogs;

import forms.PrincipaleGUI;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.Vector;

import javax.swing.JOptionPane;

/**
 *
 * @author  nahuel
 */
public class OpenCommande extends javax.swing.JDialog {
    static java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    private Connection connection;
    private int st_id;
    private PrincipaleGUI papa;
    
    /** Creates new form OpenCommande */
    public OpenCommande(java.awt.Frame parent, boolean modal, Connection connection, int st_id) {
        super(parent, modal);
        this.st_id = st_id;
        this.connection = connection;
        this.papa = (PrincipaleGUI)parent;
        this.setResizable(false);
        
        initComponents();
        
        refresh();
        
        
        this.setSize(100, 200);
        this.setLocation((screenSize.width-(this.getSize().width))/2,(screenSize.height-(this.getSize().height))/2);
        this.setTitle("Liste des commandes");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        commandeListe = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jButton1.setText("Afficher");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1, java.awt.BorderLayout.CENTER);

        jButton3.setText("Supprimer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton3, java.awt.BorderLayout.NORTH);

        jButton2.setText("Annuler");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton2, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        getContentPane().add(commandeListe, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(JOptionPane.showConfirmDialog(this, "Voulez vous réellement supprimer cette commande ?", "Supprimer la commande ?", JOptionPane.YES_NO_OPTION) == 0){
            try{
                String selectedCommande = (String)commandeListe.getSelectedValue();
                ResultSet rset = connection.prepareStatement("SELECT CO_ID FROM COMMANDE WHERE CO_DATE='" + selectedCommande + "'").executeQuery();
                rset.next();
                int co_id = rset.getInt("CO_ID");
                connection.prepareStatement("DELETE FROM COMMANDE WHERE CO_ID = " + co_id ).executeUpdate();
                connection.prepareStatement("DELETE FROM CONTENU_COMMANDE WHERE CO_ID = " + co_id ).executeUpdate();
                JOptionPane.showMessageDialog(this,"La commande a bien été supprimée","Suppression effectué",JOptionPane.INFORMATION_MESSAGE,null);
            }catch(SQLException e){
                System.out.println("[OpenCommande][jButton3ActionPerformed] SQLException : " + e);
                e.printStackTrace();
            }
            refresh();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            ResultSet rset = connection.prepareStatement("SELECT CO_ID FROM COMMANDE WHERE CO_DATE = '" + (String)commandeListe.getSelectedValue() + "'").executeQuery();
            rset.next();
            papa.newCommandeRapport(st_id, rset.getInt(1));
            this.dispose();
        }catch(SQLException e){
            System.out.println("[OpenCommande][jButton1ActionPerformed] SQLException " + e);
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
  
    private void refresh(){
        Vector listeCommandes = new Vector();
        try{
            ResultSet rset = connection.prepareStatement("SELECT * FROM COMMANDE WHERE ST_ID = " +st_id + " ORDER BY CO_DATE DESC").executeQuery();
            while(rset.next()){


            listeCommandes.add(rset.getString("CO_DATE"));
            }
        }catch(SQLException e){
            System.out.println("[OpenCommande][OpenCommande] SQLException : " + e);
            e.printStackTrace();
        }
        commandeListe.setListData(listeCommandes);
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList commandeListe;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    
}
