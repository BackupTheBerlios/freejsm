/*
 * ImportCommande.java
 *
 * Created on 24 février 2005, 16:20
 */

package dialogs;

import forms.PaneEntree;

import com.develog.utils.SmartConnector;
import com.develog.utils.SmartCube;
import com.develog.swing.SmartJTable;

import java.sql.Connection;
import java.sql.ResultSet;

import java.util.HashMap;
import java.util.Hashtable;

import javax.swing.JOptionPane;
import java.awt.event.*;

/**
 *
 * @author  nahuel
 */
public class ImportCommande extends javax.swing.JDialog {
    
    static java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    
    private PaneEntree papa;
    
    // private SmartConnector commandeintsconnector;
    private SmartCube commandeintsc;
    public  SmartJTable commandeintSJT = null;
    
    private SmartCube commandeListeintsc;
    public  SmartJTable commandeListeintSJT = null;
    
    private Connection intConnection;
    
    private int st_id;
    
    /** Creates new form ImportCommande */
    public ImportCommande(java.awt.Frame parent, boolean modal, Connection extConnection, int st_id, PaneEntree papa) {
        
        super(parent, modal);
        initComponents();
        
        this.papa = papa;
        
        intConnection = extConnection;
        this.st_id = st_id;
        
        initCommandeCube();
        initCommandeTable();
        initCommandeClick();
        
        initCommandeListeCube();
        initCommandeListeTable();
        
        this.setLocation((screenSize.width-(this.getSize().width))/2,(screenSize.height-(this.getSize().height))/2);
        this.setSize(700,350);
        this.setTitle("Import d'une commande");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        listesPanel = new javax.swing.JPanel();
        commandeTab = new javax.swing.JScrollPane();
        commandeListeTab = new javax.swing.JScrollPane();
        bouttonPanel = new javax.swing.JPanel();
        importButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        listesPanel.setLayout(new java.awt.BorderLayout());

        listesPanel.add(commandeTab, java.awt.BorderLayout.CENTER);

        listesPanel.add(commandeListeTab, java.awt.BorderLayout.EAST);

        getContentPane().add(listesPanel, java.awt.BorderLayout.CENTER);

        importButton.setText("Importer");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        bouttonPanel.add(importButton);

        getContentPane().add(bouttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        try{
            papa.importCommande(commandeintsc.getCubeInt("CO_ID"));
            this.dispose();
        }catch(Exception e){
            System.out.println("[PaneEntree][importButtonActionPerformed] Exception " +e );
            e.printStackTrace();
        }
    }//GEN-LAST:event_importButtonActionPerformed
    
    private void initCommandeCube(){
        try{
            commandeintsc = new SmartCube(intConnection);
            commandeintsc.setQuery("SELECT CO_ID, UTIL_ID, CO_DATE FROM COMMANDE WHERE ST_ID = " + st_id);
            commandeintsc.loadCube();
            // commandeGUI.add(selectPane);
            // commandeintsconnector = new SmartConnector(productintsc,productGUI);
	    // commandeintsconnector.setEditable(false);

        }catch(Exception e){ 
            System.out.println(e);    
        }
    }
    
    private void initCommandeTable(){
                
        try{
              Hashtable mappingColName = new Hashtable();
              HashMap invisibleColName  = new HashMap();

              /** On renomme les colonnes qui vont servir */
              mappingColName.put("CO_ID","ID");
              mappingColName.put("UTIL_ID","Utilisateur");
              mappingColName.put("CO_DATE","Date");


              /** On masque celle qui servent à rien */
              /*invisibleColName.put("CA_ID", "AR_CA_ID");
              invisibleColName.put("AR_ID"  , "AR_ID");
              invisibleColName.put("ST_ID"  , "ST_ID");*/

              commandeintSJT = new SmartJTable(commandeintsc, mappingColName, invisibleColName);
              commandeTab.setViewportView(commandeintSJT);
        }catch(Exception e){
            System.out.println(e);};  
    }
    
    private void initCommandeClick(){
        commandeintSJT.addMouseListener(new MouseAdapter(){
          public void mouseClicked(MouseEvent e){
            if (e.getClickCount() == 1){
              try{
                    System.out.print("-*-");
                    commandeintsc.getSpecific(commandeintSJT.getSelectedRow()+1);
                    
                    commandeListeintSJT.setQuery("SELECT DISTINCT(ARTICLE.AR_ID), AR_CODE, AR_DESIGN, CC_QT, AR_UNIT, TVA_TX, AR_PRIX FROM TVA, ARTICLE, COMMANDE, CONTENU_COMMANDE WHERE CONTENU_COMMANDE.CO_ID = " + commandeintsc.getCubeInt("CO_ID") +" AND ARTICLE.TVA_ID = TVA.TVA_ID AND ARTICLE.AR_ID = CONTENU_COMMANDE.AR_ID");
                    
                    commandeListeintSJT.loadData();
                    commandeListeintSJT.change();
                    
                    // commandeintsc.getCubeInt("AR_ID").intValue();
              }catch(Exception e2){
                  System.out.println("[initCommandeClick][UnClic] Exception : " + e2);
                  e2.printStackTrace();
              }
            }
         }
       });
    }
    
    private void initCommandeListeCube(){
        try{
            commandeListeintsc = new SmartCube(intConnection);
            commandeListeintsc.setQuery("SELECT DISTINCT(ARTICLE.AR_ID), AR_CODE, AR_DESIGN, CC_QT, AR_UNIT, TVA_TX, AR_PRIX FROM TVA, ARTICLE, COMMANDE, CONTENU_COMMANDE WHERE CONTENU_COMMANDE.CO_ID = " + commandeintsc.getCubeInt("CO_ID") +" AND ARTICLE.TVA_ID = TVA.TVA_ID AND ARTICLE.AR_ID = CONTENU_COMMANDE.AR_ID" );
            commandeListeintsc.loadCube();
            // commandeGUI.add(selectPane);
            // commandeintsconnector = new SmartConnector(productintsc,productGUI);
	    // commandeintsconnector.setEditable(false);

        }catch(Exception e){ 
            System.out.println("[ImportCommande][initCommandeListeCube] Exception : " + e);
            e.printStackTrace();
        }        
    }
    
    private void initCommandeListeTable(){
        try{
              Hashtable mappingColName = new Hashtable();
              HashMap invisibleColName  = new HashMap();

              /** On renomme les colonnes qui vont servir */
              mappingColName.put("AR_CODE","Code");
              mappingColName.put("AR_DESIGN","Désignation");
              mappingColName.put("CC_QT","Quantité");
              mappingColName.put("AR_UNIT","Unité");
              mappingColName.put("TVA_TX","TVA");
              mappingColName.put("AR_PRIX","Prix HT");

              /** On masque celle qui servent à rien */
              // invisibleColName.put("CA_ID", "AR_CA_ID");
              invisibleColName.put("AR_ID"  , "AR_ID");
              // invisibleColName.put("ST_ID"  , "ST_ID");

              commandeListeintSJT = new SmartJTable(commandeListeintsc, mappingColName, invisibleColName);
              commandeListeTab.setViewportView(commandeListeintSJT);
        }catch(Exception e){
            System.out.println(e);};  
    }
        
        
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bouttonPanel;
    private javax.swing.JScrollPane commandeListeTab;
    private javax.swing.JScrollPane commandeTab;
    private javax.swing.JButton importButton;
    private javax.swing.JPanel listesPanel;
    // End of variables declaration//GEN-END:variables
    
}
