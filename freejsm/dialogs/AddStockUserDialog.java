/*
 * addStockUserDialog.java
 *
 * Created on 19 janvier 2005, 14:42
 */

package dialogs;


import com.develog.utils.SmartConnector;
import com.develog.utils.SmartCube;
import com.develog.swing.SmartJTable;
import com.develog.database.Parametre;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JOptionPane;

import java.sql.Connection;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

/**
 *
 * @author  nahuel
 */
public class AddStockUserDialog extends javax.swing.JDialog {
    static java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    private forms.PaneStock papaStock;
    
    private Vector selectorGUI = new Vector();
    private Connection connex = null;
    private SmartConnector intsconnector;
    private SmartCube intsc;
    public  SmartJTable intSJT = null;
    private int ST_ID;
    private int adminID;
    private String originalQuery = "SELECT UTILISATEUR.UTIL_ID, UTIL_NOM, UTIL_PRENOM  from UTILISATEUR where UTIL_ID not in (select UTIL_ID from FONCTION where ST_ID = ";
    private String query = "SELECT UTILISATEUR.UTIL_ID, UTIL_NOM, UTIL_PRENOM  from UTILISATEUR where UTIL_ID not in (select UTIL_ID from FONCTION where ST_ID = ";

    
    /** Creates new form addStockUserDialog */
    public AddStockUserDialog(forms.PrincipaleGUI parent, boolean modal, int ST_ID, Connection connect, forms.PaneStock papaStock, int adminID) {
        super(parent, modal);
        this.papaStock = papaStock;
        this.ST_ID = ST_ID;
        this.adminID = adminID;
        connex = connect;
        initComponents();
        this.setLocation((screenSize.width-(this.getSize().width))/2,(screenSize.height-(this.getSize().height))/2);
        this.setSize(350,200);
        this.setTitle("Ajout d'administrateur de stock");
        initCube();
        initTable();
        initClick();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        searchPane = new javax.swing.JPanel();
        nomLabel = new javax.swing.JLabel();
        nomField = new javax.swing.JTextField();
        prenomLabel = new javax.swing.JLabel();
        prenomField = new javax.swing.JTextField();
        confirmPane = new javax.swing.JPanel();
        fonctionPanel = new javax.swing.JPanel();
        agentCB = new javax.swing.JCheckBox();
        adminCB = new javax.swing.JCheckBox();
        addPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        userPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        searchPane.setName("");
        nomLabel.setText("Nom :");
        searchPane.add(nomLabel);

        nomField.setColumns(12);
        nomField.setName("UTIL_NOM");
        nomField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nomFieldKeyReleased(evt);
            }
        });

        searchPane.add(nomField);

        prenomLabel.setText("Pr\u00e9nom :");
        searchPane.add(prenomLabel);

        prenomField.setColumns(10);
        prenomField.setName("UTIL_PRENOM");
        prenomField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                prenomFieldKeyReleased(evt);
            }
        });

        searchPane.add(prenomField);

        getContentPane().add(searchPane, java.awt.BorderLayout.NORTH);

        confirmPane.setLayout(new java.awt.BorderLayout());

        fonctionPanel.setLayout(new java.awt.GridLayout(2, 0));

        agentCB.setText("Agent de Saisie :");
        agentCB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        agentCB.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        fonctionPanel.add(agentCB);

        adminCB.setText("Administrateur :");
        adminCB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        adminCB.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        fonctionPanel.add(adminCB);

        confirmPane.add(fonctionPanel, java.awt.BorderLayout.CENTER);

        addButton.setText("Ajouter");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        addPanel.add(addButton);

        confirmPane.add(addPanel, java.awt.BorderLayout.EAST);

        getContentPane().add(confirmPane, java.awt.BorderLayout.SOUTH);

        getContentPane().add(userPane, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
	int isAdmin;
        if ( adminCB.isSelected() )
            isAdmin = 1;
        else if( adminCB.isSelected() == false & agentCB.isSelected() == true )
            isAdmin = 0;
        else
            isAdmin = -1;
        
        if ( isAdmin != -1 ){
            try{
                connex.prepareStatement("INSERT INTO FONCTION VALUES ("+ST_ID+","+intsc.getCubeInt("UTIL_ID").intValue()+","+isAdmin+")").executeUpdate();
                connex.prepareStatement("INSERT INTO JOURNAL (UTIL_ID, JO_TABNOM, JO_PRECVAL, JO_NOUVAL, JO_OPERATION) VALUES("+adminID+",'FONCTION','','###ST_ID=>"+ST_ID+".0###UTIL_ID=>"+intsc.getCubeInt("UTIL_ID").intValue()+".0###FO_LEVEL=>isAdmin','I'").executeUpdate();
            }catch(Exception e){
                System.out.println("[AddStockUserDialog][addButtonActionPerformed] Exception : " + e);
                e.printStackTrace();
            }
            papaStock.refreshUsers(ST_ID);
            this.dispose();
            
            
        }else
            JOptionPane.showMessageDialog(this,"Aucune fonction n'a été selectionné pour cet utilisateur","Erreur",JOptionPane.ERROR_MESSAGE,null);
        
        
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void prenomFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_prenomFieldKeyReleased
        refresh();
    }//GEN-LAST:event_prenomFieldKeyReleased

    private void nomFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomFieldKeyReleased
        refresh();
    }//GEN-LAST:event_nomFieldKeyReleased
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addPanel;
    private javax.swing.JCheckBox adminCB;
    private javax.swing.JCheckBox agentCB;
    private javax.swing.JPanel confirmPane;
    private javax.swing.JPanel fonctionPanel;
    private javax.swing.JTextField nomField;
    private javax.swing.JLabel nomLabel;
    private javax.swing.JTextField prenomField;
    private javax.swing.JLabel prenomLabel;
    private javax.swing.JPanel searchPane;
    private javax.swing.JScrollPane userPane;
    // End of variables declaration//GEN-END:variables
    
    public void refresh(){
     try{
         query = originalQuery + ST_ID + ") AND UTIL_NOM like '" + nomField.getText() + "%' AND UTIL_PRENOM like '" + prenomField.getText() + "%'" ;
         intSJT.setQuery(query);
         intSJT.loadData();
         intSJT.change();
     }catch(Exception e){
         e.printStackTrace();
     };    
    }
        
    private void initCube(){
        try{

            intsc = new SmartCube(connex);
            intsc.setQuery(originalQuery + ST_ID + ")");
            intsc.loadCube();
            selectorGUI.add(searchPane);
            intsconnector = new SmartConnector(intsc,selectorGUI);
            // intsconnector.setEditable(false);
            }catch(Exception e){ 
                System.out.println(e);
            }
    }
        
            private void initTable(){ 
    try{
          Hashtable mappingColName = new Hashtable();
          HashMap   invisibleColName  = new HashMap();
          
          /** On renomme les colonnes qui vont servir */
          
          mappingColName.put("UTIL_NOM","Nom");
          mappingColName.put("UTIL_PRENOM","Prénom");
                    
          /** On masque celle qui servent à rien */
          invisibleColName.put("UTIL_ID"  , "UTIL_ID");
          
          intSJT = new SmartJTable(intsc, mappingColName, invisibleColName);
          userPane.setViewportView(intSJT);
    }catch(Exception e){
        System.out.println(e);};  
    }
            
    private void initClick() {
       intSJT.addMouseListener(new MouseAdapter(){
          public void mouseClicked(MouseEvent e){
            if (e.getClickCount() == 1)
            {
              try{
                    intsc.getSpecific(intSJT.getSelectedRow()+1);
                    intsconnector.setValuesFromCube();
              }catch(Exception e2){
                  System.out.println("[AddStockUserDialog][initClick] Exception : " + e2);};
            }
            
         }
       });
   }
}
